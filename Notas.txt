
Listas
*empledos
*clientes
*productos


informacion para conusltar:
*fromas de pago: https://github.com/EzequielOggioni/MiniSuper/blob/main/MiniSuper/Usuario.cs

dfsdfs



venta
diccionario --> key nombre del usuario y valor se venta

facturacion --> cambiar por cerrar caja

archivos serializacion -> github --> buscar el de texto





Clase Facturacion
Generar conversor --> lista de venta a facturacion total y luego serializar
dia fecha y monto total 


fecha  --- montoTotal      


(Producto.ETipo)this.cmbTipoProducto.SelectedValue

C:\GITHUB\PROGRAMACION II - 2° Cuatrimestre\Parciales\1er Parcial Laboratorio II 2E - 2do cuatrimestre 2021\PetShop\PetShopApp\bin\Debug



*Administracion de los productos (ABM)

Lista de produtos + detalle + disponiblidad

*Administrar ventas (Front de venta)

login automatico





parte humana
*El sistema tiene 3 perfiles

cliente, empleado y administrador


Empleado:
	dar de alta nuevos cliente
	Clientes viejos (solo ver)
	Vender a clientes --> se tiene que cumplir que haya stock
						  Que el dinero del usuario  alcance
						  Etc

Administrador
	mismas tareas que el empleado
	+ ver informacion de empleadors y editarlos
	Podrá ver la facturación total de todas las ventas realizadas ashat el momento
	
	
Clientes existentes	
20323206008
20323206016
20323205109
20323206059
	
Clientes nuevos
20323206008	
20323206016
20323206024
20323206032	

20323206709			  
20323206717					  
	
Facturador
==========
* aceitar Camino funcional
	*Capa de visualizacion en objetos
	


*generador de factura pre impresion de ticket (form)
*Imprimir ticket



						  
						  
	private void GuardarTxt()
{
try
{
// Get the current directory.
//string path = Directory.GetCurrentDirectory();
string target = @”\txt\”;
path = Directory.GetCurrentDirectory() + target;
string fileP = Directory.GetCurrentDirectory() + target + id_consulta + “.txt”;
if (!Directory.Exists(path))
Directory.CreateDirectory(path);

StreamWriter file = new StreamWriter(fileP, true);
file.WriteLine(tramaGlobalToSave);
file.Close();
}
catch (Exception e)
{
Console.WriteLine(“The process failed: {0}”, e.ToString());
}
}
	
=============================================================================================
*Cambiar tonalidad negra en formulario principal
*Exportar a CVS (el inventario)
*Cerrar sesion por inactividad
● Utilizar listview con imágenes.
*Cambiar el icno en todos los formularios
*gregar 2 colecciones diferentes (La que tengo actual es lista)
*Polimorfismo (clases
	abstractas, métodos
	abstractos, métodos virtuales)
*Agregar boton que autocompleta los datos



Faltantes
=========

*Nombres de controles con los estilos correspondientes. --> ya esta
*Los formularios no pueden tener el color por defecto y el nombre debe ser legible al usuario.
*Tanto el icono del título de los formularios, como el de la app (el que aparece en la barra de windows) no puede ser por defecto.
*Deben existir botones que completen los datos de un administrador o de un empleado automáticamente para loguear la app (No loguearse automáticamente, sino completar lainformación en los textbox correspondientes para agilizar el ingreso de información)
*El icono de la aplicación no puede ser el icono por defecto,no puede tener fondo por defecto.--> listo
*No puede haber código sucio ni código obsoleto (código obsoleto, aunque esté comentado,invalidará este ítem).


Puntos promocion
================
*Hacer que el menú desaparezca si el mouse no se posiciona en la parte superior del formulario.
*Cerrar la sesión por inactividad
*mplementar al menos dos buscadores (que busquen por diferente dato) que permitan hacer
 búsquedas más ágiles.
*Exportar a csv.
*Agregar sonido al guardar. 
*Habilitar “dark mode”



 














